doi: 10.1111/isj.12053 Info Systems J (2015)

Perceived barriers to effective knowledge sharing in agile software teams
Shahla Ghobadi* & Lars Mathiassen†
*University of New South Wales, PO Box H58, Australia Square, Sydney 2052, Australia, email: s.ghobadi@unsw.edu.au, and †Georgia State University, PO Box 4015, Atlanta, GA 303302, USA, email: lmathiassen@ceprin.org

Abstract. While the literature offers several frameworks that explain barriers to knowledge sharing within software development teams, little is known about differences in how team members perceive these barriers. Based on an in-depth multicase study of four software projects, we investigate how project managers, developers, testers and user representatives think about barriers to effective knowledge sharing in agile development. Adapting comparative causal mapping, we constructed causal maps for each of the four roles and identiﬁed overlap and divergence in map constructs and causal linkages. The results indicate that despite certain similarities, the four roles differ in how they perceive and emphasize knowledge-sharing barriers. The project managers put primary emphasis on project setting barriers, while the primary concern of developers, testers and user representatives were project communication, project organization and team capabilities barriers, respectively. Integrating the four causal maps and the agile literature, we propose a conceptual framework with seven types of knowledgesharing barriers and 37 speciﬁc barriers. We argue that to bridge communication gaps and create shared understanding in software teams, it is critical to take the revealed concerns of different roles into account. We conclude by discussing our ﬁndings in relation to knowledge sharing in agile teams and software teams more generally. Keywords: software teams, knowledge sharing, agile development, comparative causal mapping, agile teams, qualitative study You never really understand a person until you consider things from his point of view. Until you climb inside of his skin and walk around in it. ~ Harper Lee, To Kill a Mockingbird
INTRODUCTION

Software development is a collaborative process where success depends on effective knowledge sharing (Curtis et al., 1988; Walz et al., 1993; Andres, 2002; Hansen & Kautz, 2004; Joshi et al., 2007; Sawyer et al., 2008; Williams, 2010). This is particularly true in agile development
© 2015 Blackwell Publishing Ltd

S Ghobadi & L Mathiassen

where great emphasis is placed on communication involving diverse stakeholders through practices such as joint-application design sessions and customer focus groups (Chau et al., 2003; Cockburn, 2006; Kautz et al., 2007; Chan & Thong, 2009; Conboy et al., 2010; Corvera Charaf et al., 2012). Not surprisingly, to support agile practices in software development, the Agile Manifesto lists twelve principles (http://agilemanifesto.org/principles.html), such as ‘focus on the customer’, ‘collaborate regularly’, ‘communicate face-to-face within the team’ and ‘have regular team introspection’, that inherently require effective knowledge-sharing practices between team members. Nonetheless, knowledge sharing in agile teams is challenging (Nerur et al., 2005; Cockburn, 2006; Chan & Thong, 2009; Conboy et al., 2010; Ramesh et al., 2010). For example, it can be challenging to increase users’ motivation to share speciﬁc business knowledge with developers (Conboy et al., 2010), to manage cross-functionality and the variety of social identities involved in software development (Ghobadi, 2011, Highsmith, 2002) and to encourage and facilitate sharing tacit knowledge among team members (Bjørnson & Dingsøyr, 2008). In addition, dynamic business environments have seen many software organizations adopt approaches that blend agile principles with distributed development concepts to reap the beneﬁts of both (Ramesh et al., 2006; Ramesh et al., 2012). This has, however, increased the knowledge-sharing challenges agile teams face (Ramesh et al., 2006). While efforts have been undertaken to study barriers to knowledge sharing in software teams in general and agile teams in particular (Chau et al., 2003; Chau & Maurer, 2004; Levy & Hazzan, 2009), these barriers may not be addressed without taking into account the concerns of the involved stakeholders (Newman & Robey, 1992; Robey et al., 2001; Mähring et al., 2008). In fact, because of diverse role expectations and communication gaps, software team members may have perceptual differences on issues such as project success, project failure, risk factors and appropriateness of development methodologies (Linberg, 1999; Levesque et al., 2001; Keil et al., 2002; Huisman & Iivari, 2006). Similarly, different roles such as managers, developers, testers and user representatives may have perceptual differences regarding barriers to effective knowledge-sharing practices. For example, users may perceive that developers’ lack of knowledge about their ﬁeld is a barrier to knowledge sharing. Developers may, in turn, perceive political issues and inconsistencies in users’ description of functional requirements to be major barriers. As a result, developers may defer close interaction with users until they have negotiated an agreement about overall project goals and major requirements, and users may, in turn, link developers’ lack of knowledge to their busy schedules and hold back on interacting with them unless developers take the initiative. Perceptual differences and expectations may, in particular, be present in teams where extreme dedication in adhering to or interpreting agile values and principles reinforce communication-related difﬁculties (Persson et al., 2012) and inconsistencies (Boehm, 2002; Turk et al., 2005; Pikkarainen et al., 2008). For example, user representatives may expect developers to be constantly open to new system requirements (referring to the ‘welcome change’ agile principle), and thus they may interpret developers’ inﬂexibility in welcoming change as a barrier to effective knowledge-sharing practices. However, developers may disagree; arguing that besides the importance of having certain levels of control and
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

accountability in projects, welcoming change requirements late during development may force them to work extra hours, contradicting the agile principle that values individuals more than processes (Boehm, 2002). Therefore, developers may consider user representatives’ lack of attention to specifying requirements as early as possible a key barrier to effective knowledge sharing. We argue that these perceptual differences must be taken into account to create shared understanding among team members as a key to performance in organizations (Laukkanen, 1994). Different perceptions may result in divergent actions to overcome barriers and in unsatisfactory outcomes that eventually may give rise to conﬂicts between stakeholders. Obviously, such behaviours establish unproductive communication practices and unhealthy relationships across stakeholder groups, and they may result in project delays and less than optimal software solutions. Therefore, stakeholders must explore differences in perception and come to an agreement on barriers to effective knowledge-sharing practices. In fact, the process of exploring and appreciating such differences is a necessary ﬁrst step for software teams to mitigate the knowledge-sharing barriers they face. In spite of calls for a broadened view of barriers to knowledge sharing within software teams in general (Levina, 2005) and agile teams in particular (Chan & Thong, 2009), perceptual differences among different roles remain relatively unexplored. In fact, a systematic investigation of perceptual differences of software team members regarding barriers to knowledge sharing has yet to receive signiﬁcant attention. Against this backdrop, we utilized a qualitative methodology, comparative causal mapping (CCM) (Laukkanen, 1994) to analyze data from four agile teams within two software companies. Distinguishing between the roles of ‘project manager’, ‘developer’, ‘tester’ and ‘user representative’, we constructed role-speciﬁc causal maps on knowledge-sharing barriers in agile teams. The results indicate that despite certain similarities across mappings, the four roles differ in how they perceive and emphasize barriers. Integrating the causal maps with the agile literature, we also propose a conceptual framework of barriers to effective knowledge sharing in agile teams. These insights provide valuable contributions to current theory on knowledge sharing in agile teams and software teams more generally.

T H E O R E T I C A L B AC K G R O U N D

The extant literature demonstrates several attempts to understand knowledge-sharing barriers or drivers within software teams (Kotlarsky & Oshri, 2005; Joshi et al., 2007; Oshri et al., 2008; Pee et al., 2010; Ghobadi & D’Ambra, 2013). Focusing on software teams in general, Joshi et al. (2007) used a connectionist epistemological perspective to reveal the crucial role of source’s credibility and extent of communication in shaping knowledge transfer within teams. In another study, Ghobadi & D’Ambra (2013) described the dynamics through which outcomes (goals and rewards), means (task, resource and role) and boundary (sense of identity, friendship and proximity) interdependencies drive simultaneously cooperative and competitive behaviours that in turn inﬂuence high-quality knowledge sharing in cross-functional software teams.
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

Turning to agile teams, extant literature suggests several process and context-related factors drive knowledge sharing (Cockburn & Highsmith, 2001; Augustine et al., 2005; Vidgen & Wang, 2009; Conboy et al., 2010; Ramesh et al., 2010; Conboy & Morgan, 2011; McAvoy et al., 2012) such as lightweight post-mortem styles (Dingsøyr & Hanssen, 2003; Augustine et al., 2005) and sufﬁcient documentation (Paetsch et al., 2003; Conboy & Morgan, 2011, Karlsen et al., 2011, ). The agile literature also acknowledges the driving impact of motivation-related factors (e.g., career consequences and top management support), collaborative factors (e.g., encouraging agile coaching, training, practices such as pair programming and collective code ownership) (Chau et al., 2003; Chau & Maurer, 2004; Melnik & Maurer, 2004; Chan & Thong, 2009; Conboy et al., 2010) and ability-related factors (e.g., self-efﬁcacy and experience culture) (Chan & Thong, 2009). While the general software development literature provides us with more solid theoretical foundations in this area (as discussed previously), the agile literature is still fragmented with limited analyses based on and contributing to rigorous theoretical perspectives (Dingsøyr et al., 2012). This void of research about knowledge sharing in agile development is surprising given the high emphasis on communication and collaboration. Further, prior studies have paid little attention to speciﬁc team aspects, such as perceptual differences regarding knowledge-sharing barriers in agile teams, thus hampering the development of a rigorous understanding of agile team characteristics. With this background, we designed our research based upon existing explanations of knowledge sharing within software teams in general and agile teams in particular to explore perceptual differences to knowledge-sharing barriers across key roles in agile teams. We drew on organizational role theory (Katz & Kahn, 1978) with its roots in sociology (Biddle, 1986, Biddle, 1979) and offered insights for understanding behaviours and attitudes of individuals at work (Mähring et al., 2008, Peppard & Ward, 2004). The theory asserts that behaviour in a particular work role, referring to a distinct set of activities, is the result of organizational demands, social demands and personal demands on that role. Accordingly, an organizational role, indicated by a position title and speciﬁed by a job description, encompasses expected beliefs and behaviours attached to it. The focus of this theory on linking roles to beliefs and behaviours is, therefore, aligned with our interest in understanding differences between roles in perceiving knowledge-sharing barriers in agile development. We focused on four key roles in software development projects to understand the variety of perspectives and behaviours. Speciﬁcally, building on previous research on key roles and their interactions (Newman & Robey, 1992; Barki & Hartwick, 2001; Robey et al., 2001), we targeted the four roles of ‘project manager’, ‘developer’, ‘tester’ and ‘user representative’, covering the recurrent actions performed during software development. To sum up, informed by organizational role theory and the literature on knowledge sharing within software teams in general and agile teams in particular, our research objectives are the following: (i) to explore the similarities and differences in how four key roles – ‘project manager’, ‘developer’, ‘tester’ and ‘user representative’ – perceive barriers to knowledge sharing in agile teams, and (ii) to integrate the ﬁndings into a conceptual framework that encompasses these perceptions and provides implications for managing agile development. To address these objectives, we investigate the following research question: How do key stakeholders in agile software development perceive barriers to effective knowledge sharing?
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams
RESEARCH METHOD

Comparative causal mapping Comparative causal mapping is a variant of cognitive mapping where respondents explain their causal assertions about a phenomenon through interview sessions (Laukkanen, 1994). It demonstrates the patterns of concepts and causal beliefs that are embedded in explicit statements of different groups. CCM is primarily intended and appropriate for comparative analyses between different types of organizational actors and pinpointing cognitive similarities or differences across those actors (Laukkanen, 1994; Laukkanen, 1998). Moreover, it best serves explorative and evocative interests with a focus on small or medium sample qualitative studies (Laukkanen & Päivi, 2013). CCM has been used to investigate perceptual similarities and differences across individuals or groups (Jenkins & Johnson, 1997; Budhwar & Sparrow, 2002; Tyler & Gnyawali, 2009) Chandra & Loosemore, 2010, and it is therefore a suitable method for this research. Adapting CCM to examine similarities and differences in perceiving knowledge-sharing barriers across different roles, we considered the proposed stages for CCM (Laukkanen, 1994; Tyler & Gnyawali, 2009; Chandra & Loosemore, 2010): (i) predata and data collection stages (participant selection, interview design, symmetric data collection and follow-up interview sessions), and (ii) analysis and post-data collection stage (establishing coding guidelines and higher-order categories, identifying causal relationships, drawing maps based on reﬂected themes, analysis of maps and seeking feedback from experts). Our adaptation of each of these stages is elaborated in the next discussions.

Data collection We applied theoretical replication logic to add conﬁdence and robustness to our ﬁndings (Eisenhardt & Graebner, 2007; Yin, 2009). More speciﬁcally, we used the following: (i) replication strategy (Yin, 2009) to include a diverse range of perspectives on knowledge-sharing barriers by studying two companies and selecting participants to represent different roles, and (ii) polar sampling (Eisenhardt & Graebner, 2007) to secure variance across selected projects and add insights related to project outcomes (Sonnentag, 1995, Yang & Tang, 2004) by selecting two completed projects within each company, one perceived to be high performing and one perceived to be low performing. We selected two Australian software development companies (Alpha and Beta) that exemplify important characteristics for our study. The Australian software industry has shown increasing levels of market and technological growth (Grifﬁth, 2011). Alpha and Beta are medium-size, and they both follow collocated and distributed agile methodologies in their software projects. They have a long history of focusing on non-commercial software development with a recent proﬁle of commercial projects, demonstrating their interest and established capability in expanding boundaries of their activities. We collected data through interview sessions with four key roles to discuss barriers to effective knowledge sharing in agile teams. We worked closely with the development manager of each company to identify
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

and recruit eight interviewees (two project managers, two developers, two testers and two user representatives) from two of their recent agile projects. For example, the responsibility for individuals that held the role of a project manager was to ensure customer expectations were addressed in the ﬁnal product (both companies used the term ‘product owner’). For each company, we asked the development manager to select one high performing and one low performing project based on four indicators: (i) how stakeholders perceived project performance, (ii) how the team dealt with challenges, (iii) how the project delivered expectations and (iv) how social relationships were experienced. The projects were completed within the last 3 months (at the time of the interviews), participation was voluntary and participants were assured of conﬁdentiality. Respondents were asked about their perceptions regarding knowledge-sharing practices during the considered agile project. The agile literature and existing frameworks on drivers of knowledge sharing within software teams guided the interviews, but we followed a multi-layered semi-structured interview guide (Appendix ) to evoke new constructs and linkages, and to create multiple occasions for access to human memory (Laukkanen, 1994). First, we collected background information about knowledge sharing during the speciﬁed project to explore key issues and jargon and to provide ‘anchor’ concepts for the next phase of the interview. For this, we asked open questions such as: ‘in what ways was knowledge sharing practiced?’ Second, based on responses, we asked probing questions to elicit further information about the concepts and relevant cause and effect relationships. Third, we did a ﬁnal check by asking speciﬁc questions to point into key enablers and barriers. This check afforded interviewees a closing opportunity to remind us of any item that might have been missed or required further explanation. Interview sessions lasted from 30 min to 1 h and were recorded and transcribed. Tables 1 and 2 summarize project and respondent characteristics. After the analysis of the initial interviews, we returned to Alpha and Beta for follow-up interviews. The objective was to resolve ambiguities and validate interpretive accuracy and credibility of our interpretations (Guba & Lincoln, 1985). For example, there were quotes in which directionality was not clearly stated, rather the context of discussion had pointed to causality.

Table 1. Project characteristics Alpha Low performing project (LA) Description Developed a web-based data collection system for a collaborative neonatal network. 6 months 10 members High performing project (HA) Developed a data capture system specialized for data and metadata associated with ancient artefacts. Low performing project (LB) Developed a system that automates the integration of data from the stock exchange market. 2 months 12 members Beta High performing project (HB) Developed a system that allows clients to develop maps of stocks or equities based on different types of information 9.5 months 10 members

Duration Team size

4 months seven members

© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams
Table 2. Role characteristics Project manager Mean Age Education Software experience Agile experience Company experience 37.3 years Undergraduate: 75%, post-graduate: 25% 14.8 years 6.8 years 4.4 years Developer Mean 29.5 years Undergraduate: 100% 6.3 years 4.3 years 3.9 years Tester Mean 35.5 years Undergraduate: 100% 6.4 years 5.0 years 3.6 years User representative Mean 40.0 years Undergraduate: 25%, post-graduate: 75% N/A N/A 6.3 years

We drafted speciﬁc graphical representations (causal maps) for each interviewee and allowed the individual to evaluate the concepts and linkages that were based on their own statements (all together 16 individual maps were drafted). We used semi-structured interviews to support this process by asking direct questions such as: ‘When you say dummy data for test was an issue do you mean it inhibited effective knowledge sharing?’ This led to minor revisions in the individual causal maps.

Data analysis

Comparing maps
Despite the wide application of several variants of causal mapping, methodological discussions of CCM are relatively rare (Laukkanen & Päivi, 2013). We adapted Laukkanen’s (1994) approach for CCM using CMAP2 software by the following four steps: (i) creating and using standard vocabularies, (ii) processing data for causal maps, (iii) constructing causal maps and (iv) analysis of causal maps. We leveraged different software packages such as Nvivo for coding and creating standard vocabularies, MS Excel for processing causal matrices and calculating indicators and MS PowerPoint for creating visual causal maps. In the ﬁrst step, ‘creating and using standard vocabularies’, one researcher read all transcripts, grouped frequently mentioned words together and inductively generated a list of preliminary codes. We represented each code by a label that summarized the meaning of a number of words or phrases used by the interviewees. We then examined the resulting coding scheme for theoretical or logical relevance against existing frameworks on drivers of knowledge sharing within software teams, without necessarily expecting the evoked maps to reﬂect these frameworks. Another researcher read the material to verify their face validity and assess the parsimony and coverage of the coding scheme. Once the coding scheme had stabilized, one researcher coded all transcripts and the other assisted by reading the material to verify the validity of the coding. Where disagreement occurred, discrepancies were resolved through discussion to minimize researcher biases. To estimate the reliability of the coding process, Scott’s pi (Scott, 1955) was calculated using eight of the 16 interview transcripts and 34 of the coding categories. A heuristic for content analysis is to require a reliability coefﬁcient of
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen approximately 0.75 or more (Holsti, 1969), and Scott’s pi for our study was estimated at an acceptable level of 0.86. In the second step, ‘processing data for causal maps’, we examined all transcripts systematically to identify coded statements that imply an explicit cause–effect relationship by using keywords such as ‘so’, ‘if-then’ and ‘because’. We recorded all causal statements and linkages in the actual language of the interviewees. We then developed a list of 60 perceived barriers (Appendix ) by analyzing the identiﬁed causal statements and linkages, and we categorized these barriers drawing on Leavitt’s organizational model of people, structure, technology and task (Leavitt, 1964) that has previously been applied to categorize software development risks (Lyytinen et al., 1998; Persson et al., 2009). As a result, we identiﬁed seven categories of barriers (see Appendix for detailed information). For example, we categorized barriers related to geographical and time differences between team members (e.g., physical distance between team members) as ‘team diversity’ barriers (discussion on the categories is provided in the Conceptual Framework section). In the third step, ‘constructing causal maps’, we represented each identiﬁed ‘cause’ and ‘effect’ concept in the coded statements (from the previous step) with the appropriate higher-order barrier constructs (from the previous step). For example, the interview statement: ‘I think different cultures [cause] were challenging for knowledge sharing [effect]. We had agile culture that might be different with others, and universities are more bureaucratic and not agile’, was coded as ‘Agile Versus Non-Agile Cultures (client and development company)’ (categorized under project setting barriers in the second step). When drawing causal maps, we therefore established a link between ‘project setting’ and ‘effective knowledge sharing’ in the causal maps. In another example, when interviewees argued that unfamiliarity of team members (team diversity barriers) made them prefer working independently (tendency to work independently, categorized under team perceptions barriers), we established a link between ‘team diversity’ and ‘team perceptions’ barriers. Finally, we combined the cognitions of the four interviewees with similar roles and visualized them as a role-speciﬁc causal map. This resulted in four causal maps that represented the perceptions of the four roles. In the fourth step, ‘causal maps analysis’, we ﬁrst analyzed the content of maps. Content analysis captures the subject and meaning of a communication that an individual (or group) perceives as being relevant. Our follow-up interviews provided member checks to validate interpretive accuracy and to check credibility and trustworthiness of each individual map (Guba & Lincoln, 1985). Next, we made sense of the maps and compared them (e.g., what are the key focus areas of project managers vs. developers) by analyzing their structure accompanied by the interview statements (Eden et al., 1992; Chandra & Loosemore, 2010). The objective of structural analysis is to examine the relationships among the items within a map and how they relate to each other (Hodgkinson & Clarkson, 2005; Nadkarni & Narayanan, 2005; Chandra & Loosemore, 2010). Integrating prior recommendations for comparing causal maps (e.g., (Langﬁeld-Smith & Wirth, 1992; Nadkarni & Narayanan, 2005; Armstrong et al., 2007, Chandra & Loosemore, 2010; Reid et al., 2010)), we compared maps at three levels: map, construct and between constructs. For this purpose, we drew inferences from the qualitative interview statements (e.g., how many times interviewees referred to the linkage between project communication barriers and effective knowledge
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams sharing) and the maps themselves (e.g., the number of constructs in the project manager’s map) to allow comparison of maps. According to the CCM literature, drawing inferences and reporting ﬁndings require artistic skills to follow causal implications reﬂected in the maps and information from initial and follow-up interview sessions (Tyler & Gnyawali, 2009). Therefore, besides using analytical measures (map level, construct level and between constructs level) to provide a foundation for our comparative analysis, we also remained ﬂexible to draw upon empirical statements and underlying concepts (see Barrier Emphasis section or Table 5, for example). In summary, while the analyses involved some quantitative data, they were qualitatively driven and aimed at providing qualitative insights (e.g., (Nelson et al., 2000; Reid et al., 2010; Ghobadi & Ghobadi, 2013)). As is customary in qualitative studies, we used and report sample quotes to bring the key concerns of interviewees into life (Sarker & Sarker, 2009). • Map-level analysis compared comprehensiveness and density of the maps. Density describes the interconnectedness of the constructs in the map; it is calculated by dividing the number of links among constructs to the number of constructs in the map (Chandra & Loosemore, 2010). High density indicates a well-understood concept by interviewees, whereas low density means a simpler and less understood concept. Comprehensiveness is an indicator of the depth and breadth of understanding a phenomenon; it is calculated by counting the number of constructs in a map. High comprehensiveness reﬂects multidimensionality of the interviewees’ viewpoint pertaining to the concept, whereas low comprehensiveness refers to limitations in perceiving the concept from different angles. • Construct-level analysis compared maps in terms of centrality of constructs for each role map. Centrality is an indicator of how central or important a construct is to the map; it is calculated by dividing the number of direct linkages involving the construct to the total number of linkages in the map. Understanding centrality of variables across different maps is important because this measure indicates similarities and differences of the perceived importance of constructs across different groups. We examined and compared centrality of barrier constructs in each map to understand and report how central each barrier construct was for each role. • Between-constructs-level analysis examined reachability between constructs. Reachability is an indicator of the total strength of the connection between two constructs; it is calculated as the sum of the direct and indirect effects of one construct on another construct. We examined reachability between barrier constructs in each map to understand and report how each role emphasized the relationship between speciﬁed constructs (e.g., relationship between product communication barrier and effective knowledge sharing was reported to be strong in developer map). Directionality of the linkages can be shown by symbols ‘+’ or ‘-’, where ‘+’ indicates two factors are positively related, whereas ‘-’ indicates an inverse relationship.

Conceptual framework
Next, to integrate the ﬁndings from the barrier items (Appendix ) and causal maps (Figures 1–4) into more general empirical ﬁndings (Lee & Baskerville, 2003), we followed three
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

Figure 1. Project manager map.

steps. First, we carefully went through barrier constructs and their associated barrier items (Appendix and Figures 1–4), removed redundant items, merged similar and relevant items and took initial steps away from company speciﬁc jargon. For example, under barriers related to ‘team capabilities’ we merged ‘Not Enough IT Human Resources (client company)’ with ‘Lack of Experience with Software Development Companies (client representatives)’ and we renamed them as ‘Lack of IT resources and software development experience in client company’. Second, we considered core publications on knowledge sharing in the agile literature (Augustine et al., 2005; Vidgen & Wang, 2009; Conboy et al., 2010; Ramesh et al., 2010; Conboy & Morgan, 2011; McAvoy et al., 2012) to complement and further develop the conceptual framework. As an .example of the impact of the agile literature, we added ‘fear of self-exposure deﬁciencies in development team’ based on Conboy and Morgan’s (2011) reference to fears of exposing weaknesses through highly-intensive agile practices such as stand-up meetings and onsite customers. Such fears make team members feel unsafe in sharing their honest
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

Figure 2. Developer map.

opinions and ideas. In total, six items were added. Third, to examine the application and usefulness of the framework, we presented it to software professionals at Alpha. We incrementally conducted four 1-h evaluation sessions by incorporating the received feedback at the end of each session prior to its presentation to the next evaluators. The four sessions involved (i) one project manager and developer, (ii) one project manager, (iii) one tester and one project manager and (iv) one user representative, respectively. We terminated the evaluation of the framework at this point as the last two sessions only led to very minor changes, and the participants found the framework comprehensive and suggested using it for managing agile projects. The evaluation sessions resulted in revised formulations of 10 barriers to increase clarity and improve understanding. For example, ‘Neglect of nonfunctional requirements by development team’ was revised as ‘Neglect of non-functional requirements by stakeholders’. As a result, we came up with a list of 37 knowledge-sharing barriers (Appendix C) and a general conceptualization of knowledge-sharing barriers (Figure 5).
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

Figure 3. Tester map.

R E S U LT S

Comparison of role maps To provide insights into the research question of ‘how do key stakeholders in agile software development perceive barriers to effective knowledge sharing’, we ﬁrst present causal maps that resulted from our analyses of the interviews with project managers, developers, testers and user representatives at Alpha and Beta. Figures 1, 2, 3 and 4 show the causal maps for the roles of project manager, developer, tester and user representative. The seven constructs and their deﬁnitions are as follows: 1 Team diversity barriers refer to conceptual, geographical and time differences between team members that may hinder effective knowledge sharing.
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

Figure 4. User representative map.

2 Team perceptions barriers refer to attitudes and values of team members that may hinder effective knowledge sharing. 3 Team capabilities barriers refer to knowledge and skill-related issues among team members that may hinder effective knowledge sharing. 4 Project communication barriers refer to communication-related issues within the project that may hinder effective knowledge sharing. 5 Project organization barriers refer to aspects of the organization and conduct of the project that may hinder effective knowledge sharing. 6 Project setting barriers refer to task and context-related issues that may hinder effective knowledge sharing. 7 Project technology barriers refer to technological issues that may hinder effective knowledge sharing.
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

The transparent grey (fading) constructs and linkages exist in the overall map but not in that particular role map. We include these fading constructs and linkages to remind readers of the overall picture that was suggested by all roles and to enable a visual comparison between single maps and the aggregate data. For example, the project manager map (Figure 1) demonstrates that project managers referred to all seven knowledge-sharing barriers constructs (comprehensive map). The map’s density, which represents interconnectedness of the constructs in the map, was 3.38 (calculated by dividing 27 (we counted the total causal links that were mentioned by project managers during interviews) by 8 (number of constructs in the map)). In terms of centrality, the most central constructs in Figure 1 were team perceptions and effective knowledge-sharing constructs (0.59, 0.56), calculated by dividing the number of direct linkages involving the speciﬁed construct (as stated in the interviewees’ statements) by the total number of linkages in the map (16/27 and 15/27). In terms of reachability, all barrier constructs in Figure 1 inﬂuenced effective knowledge sharing negatively (the bold links). Reachability, which indicates the total strength of the connection between two constructs, was highest between project setting barrier construct and effective knowledge-sharing construct, suggesting that project managers put a strong emphasis on the negative impact of project setting barriers on knowledge-sharing practices. Besides, some constructs inﬂuenced each other (dashed links). For example, team diversity barriers gave rise to team perception barriers (e.g., unfamiliarity of team members made them prefer to work independently). To compare maps, in terms of comprehensiveness, all maps encompass the seven barrier constructs, with the exception that the developer map does not include the team perceptions construct. The user representative map was denser (density = 4.13), compared to other maps (project manager = 3.38, developer = 2.57 and tester = 3.25). Concerning centrality measures, team perceptions and project setting were more central in the project manager map (0.59, 0.19), compared to other maps (developer = 0, tester = 0.38, user representative = 0.12; developers = 0.06, testers = 0.08 and user representatives = 0.06). This is expected as project managers often are in a position to observe team perceptions and attitudes and report on them. Team capabilities were found to be more central in the developer and user representative maps (0.28 and 0.27), compared to other maps (project managers = 0.11 and testers = 0.08). Developers and users are the central roles for moving development forward. Thus, they naturally place a special emphasis on this construct. We also noted that project organization was shown to be more central in the tester map (0.35) compared to other maps (project managers = 0.15, developers = 0.28 and user representatives = 0.12). The role of testers mainly involves working with developers and sometimes project managers, thus they tend to see organizational problems within the team, while developers are busy with development and coding and project managers are focused on negotiations with client and facilitation of developers. Finally, project technology and project communication were found to be considerably more central in the user representative map (0.12 and 0.36) compared to other roles. This may be because users are likely to suffer from challenging communication between the development company and themselves. The developer map was second in emphasizing project communication (0.28). In terms of reachability measures, the strongest linkage in the project manager map was the relationship between project setting and effective knowledge sharing (0.44). This is
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

understandable because project managers are often most involved with project setting barriers such as project budget, organizational politics and organizational culture, which in agile development may severely impact the development team’s ability to, for example, provide demonstrations at the end of tight 2-week sprints. Illustrating this linkage, one project manager stated: When you have a budget that is small, every single meeting you go to is costing the project. So, you have to balance how much time to spend talking to people versus how much time you spend getting things done. The strongest reachability measures in the developer map, tester map and user representative map were, respectively: project communication barriers and effective knowledge sharing (0.44), project organization barriers and effective knowledge sharing (0.54) and team capabilities barriers and effective knowledge sharing (0.45). These results and re-examination of the interviewee statements suggest that close communication with end users (and not only client representatives) is important for developers to understand them better and do their jobs better. This issue may, however, be overlooked during distributed agile projects where product owners are primarily in charge of dealing with clients. As one developer stated: I am in charge of administrating the application after it is in production. But I haven’t actually had much chance to talk to people who are actually going to use the system on a day to day basis. Maybe that is not the case for the [Project manager]. Because I know they did go to the [client company] a couple of times. We noted that testers placed a special emphasis on organizational-related issues surrounding agile practices such as Scrum. Speciﬁcally, the development team may attempt to adhere to the agile value of ‘individuals and interactions over processes and tools’ without following an established structure and vision for review sessions. One tester stated: In the Scrums, we go around the circle and you say what you did yesterday and what you are doing today and if you need any help. But they tend to become a place where someone will say a bit of something and then zone out. So, Scrums more became a place to just saying things and then go back to work. Finally, user representatives tended to blame the development team (i.e., project managers, developers and testers) for lack of capability to understand users. This is problematic in agile development where software is developed incrementally and communication problems easily may result in major reworks or wrong estimates. As one user representative said: I am not quite sure how they [development company] train their people to gather knowledge and translate it into the computer language or the system. If you ask nurses [end users], they wouldn’t give you any straight answer … because they haven’t any knowledge of software development and they will probably say that is right, and afterwards when you do the testing, they’d say: oh, that is not quite what we want.
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen
Table 3. Centrality and reachability results Constructs 1.Team diversity barriers 2.Team perceptions barriers 3.Team capabilities barriers 4.Project communication barriers 5.Project organization barriers 6.Project technology barriers 7.Project setting barriers Project manager map C C C C, R C C, R C, R Developer map Tester map User representative map

C C, R C

We summarize the centrality and reachability results in Table 3, showing which maps place the strongest emphasis on each of the seven barrier constructs. For example, project setting is most central in the project manager map (we noted a C for centrality in that cell). In addition, the strongest link in the project manager map is the relationship between project setting barriers and effective knowledge sharing (we noted an R for reachability in that cell). Overlaying the centrality and reachability results, Table 3 suggests that project setting, project communication, project organization and team capabilities barriers are the key foci of the project manager, developer, tester and user representative map, respectively.

Barrier emphasis across roles To add further insights on comparative analysis, Table 4 demonstrates how each role emphasized the seven barrier constructs. The table shows how the underlying concepts in each construct (see Appendix for constructs and their underlying concepts) are highlighted by each role. For example, the ﬁrst row of Table 4 shows that out of six concepts within team diversity barriers, project managers, developers, testers and user representatives raise 5, 3, 2 and 3 concepts, respectively. The information in Table 4 concurs with the ﬁndings in Table 3; the most emphasized barrier construct by each role is the same as the bold items in Table 3. In the next discussions, we provide a detailed explanation of how each role instantiated each construct.

Table 4. Emphasis on the underlying concepts of barriers constructs Constructs 1.Team diversity barriers /6 2.Team perceptions barriers /8 3.Team capabilities barriers /10 4.Project communication barriers /11 5.Project organization barriers /12 6.Project technology barriers 4 7.Project setting barriers /9 Project managers 5 4 4 1 5 1 8 developers 3 0 3 6 3 1 2 testers 2 2 2 4 8 1 2 User representatives 3 3 7 6 3 4 2

© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

Team diversity barriers
Project managers refer to ﬁve out of six empirically observed concepts within the team diversity construct whereas other roles refer to fewer concepts (3, 2 and 3). This is understandable because project managers are in a position to observe team diversity across different groups and its consequences on team behaviours. Illustrating this, one project manager stated: We had a huge amount of discrepancy in terms of people’s knowledge. We had someone who knows the [domain knowledge] over ﬁve years. We had people who had never worked on [this area].

Team perceptions barriers
Project managers and testers have very different perceptions compared to user representatives. They raise team-related challenges (e.g., low levels of focus on project), and in one case they also blame client attitudes (e.g., inappropriate assumptions made by the client). As one project manager stated: They had certain expectations about what they could get with the very small budget they had … It turned out they [client representatives] were not telling us these … Because we are agile and ﬂexible they assumed we are just going to do that. However, user representatives point to the relationship between project technology and team perceptions to explain how inappropriate methodology (agile methodology) makes the development team inﬂexible to innovation and change. In contrast, the development team tends to avoid raising challenges related to agile methodology. One user representative said: I found that the format of agile restricts innovations and restricts knowledge sharing. If they [development team] don’t have a story written it seems to inhibit their initiative to actually be proactive and do something about it. And I’ve been in meetings where something glaring has come up, and I’d say why this wasn’t done, why wasn’t this raised, and someone goes: we didn’t have a story.

Team capabilities barriers
This construct includes both technical and social team capabilities. A close look at the concerns of the different roles shows that the development team focused on technical barriers (e.g., unfamiliarity with the coding language). As one developer stated: It was Ruby and Rails application. I hadn’t used it before. Well, I would probably be the main barrier because I didn’t know the language. However, user representatives highlighted the importance of social capabilities for achieving effective knowledge sharing.
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

The [development company] needs to understand what [our business] is about, and what people doing [this business] look like. Then they will be able to build more effective communication with us. In addition, there was not much consistency in how project managers, developers and testers instantiated barriers associated with team capabilities. Testers were inﬂuenced by the stories that are often provided by project managers and they work with developers, so they raised issues about developer and project manager capabilities. In contrast, project managers were critical towards the capabilities of user representatives (e.g., lack of experience with software development companies).

Project communication barriers
Out of the 11 concepts within the project communication barriers’ construct, project managers, developers, testers and user representatives raised 1, 6, 4 and 6 concepts, with different roles referring to different concepts. Developers blamed user representatives (e.g., improper check of functionalities with end users), while user representatives criticized the development team for their communication-related limitations (e.g., passive engagement with the client). Both developers and testers seemed willing to have more face-to-face communication with the user representatives, while project managers believed it was better if they were in charge of communication with their client. One project manager stated: We have a very small set of people who understand what the clients want and can create a common vision rather than everyone else having their own opinion about how that works. Not surprisingly, project managers did not raise many concerns (1 concept) regarding project communication barriers.

Project organization barriers
Testers refer to eight out of 12 empirically observed concepts within this construct, which is more compared to other roles (5, 3 and 3). It is understandable that user representatives do not emphasize this category because the development team is mainly involved in the organization of project activities. Considering the development team, developers, testers and project managers do not refer to the same concerns. Testers mainly refer to project organization barriers, likely because they are highly inﬂuenced by developers (test of stories) and project managers (assigning insufﬁcient resources) and therefore tend to emphasize organizational challenges within the team. However, developers are often busy with coding, and project managers are mainly focused on negotiations with user representatives and facilitating developers. One tester said: We were at a peak, ﬁve developers to one tester. So you‘d have a large amount of work coming through at any point of time. So you can have a basic understanding, but not a deep understanding.
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

Project technology barriers
User representatives placed great emphasis on all the concepts within this construct (four out of four), whereas other roles were concerned about one concept. User representatives questioned the used technology broadly, whereas the development team did not. The development team raised concerns about collaboration technologies. As one project manager stated: We did not have clear deﬁned templates or ways to use Conﬂuence. It doesn’t have a great set of collaborative tools, at least the version that we use. Only one developer raised challenges related to the agile methodology, and this developer had only been working on agile projects for 7 months.

Project setting barriers
This barrier included nine concepts, and project managers pointed to eight of them, whereas other roles referred to only two concepts out of nine. Hence, project managers were very concerned about challenges that project setting can bring to agile development. This is understandable because their role requires them to deal with project setting issues. For example, compared to other roles, project managers are in a very good position to see how legacy systems, cultural issues, organizational politics and budget challenges impact development practices. As one project manager stated: They [client company] had a small database that was developed by someone who was not part of the team. So, their understanding of certain details and requirements of the project was unclear and even misleading.

Conceptual framework of barriers Our ﬁnal framework consists of a list of 37 knowledge-sharing barriers (Appendix C) and a general conceptualization of knowledge-sharing barriers (Figure 5). Focusing on providing a conceptualization for knowledge-sharing barriers, Figure 5 reveals three types of barriers (team factors, process factors and contextual factors) and seven speciﬁc barriers (team diversity, team perceptions, team capabilities, project communication, project organization, project setting and project technology) based on the 37 barrier items in Appendix C (as detailed in the Data Analysis section). By providing a general conceptualization of knowledge-sharing barriers in agile teams, Figure 5 provides a fertile ground for future research that speciﬁcally focuses on establishing theoretical and empirical models of the interrelations between barrier constructs. Similar to how Leavitt’s model depicts all possible interactions between the four components of people, structure, task and technology (Lyytinen & Newman, 2008), we show linkages between all barrier constructs as thin lines to highlight possible relationships that should be examined in further investigation and model building.
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

Figure 5. Conceptualization of barriers to effective knowledge sharing in agile software teams.

DISCUSSION

Contributions to theory The objective of this study was to explore the similarities and differences in how key actors perceive barriers to effective knowledge sharing in agile development. Framing our research question as ‘how key stakeholders in agile software development perceive barriers to effective knowledge sharing?’, we ﬁrst built on organizational role theory (Katz & Kahn, 1978) and previous systems development literature (Robey et al., 2001) to focus on the recurrent actions performed by the four key roles of ‘project manager’, ‘developer’, ‘tester’ and ‘user representative’.
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

Informed by the literature on knowledge sharing within software teams in general (Joshi et al., 2007; Oshri et al., 2008; Ghobadi & D’Ambra, 2013, ) and agile teams in particular (Chan & Thong, 2009), we used CCM to provide qualitative insights into how the four roles perceive barriers to effective knowledge sharing. CCM enabled us to (i) evoke empirical and generalized constructs of knowledge-sharing barriers, (ii) identify the complex chains of arguments that emerged from the interview statements as cognitive maps (Figures 1–4) and (iii) reveal cognitive similarities and differences in how the observed team roles perceive knowledge-sharing barriers. The application of CCM added richness and structure to the ﬁndings and allowed us to offer three theoretical contributions to the literature. First, we have presented empirically grounded models of the diverse perspectives on knowledge-sharing barriers across four key roles in agile teams. These ﬁndings represent generalizations from theory (organizational role theory and models of knowledge sharing) and description (interviews statements) to description (Lee and Baskerville, 2003). As summarized in Table 5, barriers were, despite certain similarities, perceived differently across the roles. Speciﬁcally, as discussed in detail in the Result section, we found notable variation in how roles emphasized the seven barriers (third point in Table 5). In addition, different roles referred to different instances of barriers constructs (fourth point in Table 5). The causal models (Figures 1–4) and the summary in Table 5 support prior studies that sees roles as patterns of actions and interactions that inﬂuence the course of events (Galletta & Heckman, 1990; Zigurs & Kozar, 1994) and as such, they may support continued efforts to explicate

Table 5. Empirical ﬁndings on barriers to effective knowledge sharing in agile software teams Summary of empirical ﬁndings 1. All roles highlighted the seven barrier constructs, with the exception that developers did not refer to barriers associated with team perceptions. 2. User representatives revealed more cognitive linkages between constructs (density of 4.13), compared to other roles (project manager (3.38), developer (2.57) and tester (3.25)). 3. There was a variation on how roles emphasized the seven barriers, for example: ○ Project managers put primary emphasis on ‘project setting’ barriers. ○ Developers put primary emphasis on ‘project communication’ barriers. ○ Testers put primary emphasis on ‘project organization’ barriers. ○ User representatives put primary emphasis on ‘team capabilities’ barriers. 4. There was a variation on how roles instantiated each barrier, for example: ○ For team perceptions barriers, project managers, developers and testers raised concerns about their own limited focus on the projects and inappropriate assumptions made by the client, whereas user representatives were mainly concerned with the inﬂexibility of the development team related to innovation and change. ○ For team capabilities barriers, developers focused on their own limited technical capabilities, whereas user representatives questioned social skills of development team. In addition, there was not much consistency in how developers, testers and project managers instantiated barriers associated with team capabilities. ○ For project communication barriers, developers blamed user representatives for improper check of functionalities with end users, whereas user representatives criticized the development team for passive engagement. ○ For project technology barriers, user representatives questioned the used technology broadly (in particular appropriateness of the agile methodology), whereas the development team did not raise challenges associated with the agile methodology.

© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

and promote roles in software development contexts (Mähring et al., 2008). Some of these results concur with the previous studies that link different roles to tasks performed (Huisman & Iivari, 2006). For example, it is understandable that user representatives consider developers’ lack of knowledge about their ﬁeld a barrier to knowledge sharing, while developers, in turn, may perceive political challenges within the client company, reﬂected in frequent change of information technology representatives, as major barriers. In addition, our results shed light on important perceptual differences that are unique to agile contexts, as agile values and principles (e.g., welcoming change and measuring progress based on the highquality software developed) may reinforce communication-related difﬁculties (Persson et al., 2012) and inconsistencies (Boehm, 2002; Turk et al., 2005; Pikkarainen et al., 2008). For example, user representatives interpreted developers’ inﬂexibility in welcoming change as a barrier to innovation and effective knowledge sharing, while developers considered users to have inappropriate expectations to how ﬂexible developers can and should be, thus inhibiting effective discussion up front. In another example, although the development team tried to adhere to the agile principle of ‘measure progress based on the high-quality software developed’, they tended to overlook the importance of coaching, mentoring and voluntary contributions in performance evaluations (Conboy et al., 2010). While such perceptual differences are inevitable, awareness of how they manifest across key roles in agile teams reveals new insights into the limited information systems (IS) research that focuses on organizational role theory and interaction between roles (Zigurs & Kozar, 1994; Barki & Hartwick, 2001, Mähring et al., 2008). Second, we drew upon existing models of knowledge sharing and interview statements to develop a conceptual framework of knowledge-sharing barriers in agile teams (Figure 5 and Appendix C). Following Lee and Baskerville (2003), this framework represents generalization from theory and description to theory, hence contributing to moving agile software development forward as a scientiﬁc discipline (Dybå & Dingsøyr, 2008; Dingsøyr et al., 2012). This is arguably a more comprehensive and systematic conceptualization of knowledge-sharing barriers compared to what has previously been published in both the agile literature (Dingsøyr & Hanssen, 2003; Korkala & Abrahamsson, 2007) and the general software literature (Joshi et al., 2007; Pee et al., 2010). By presenting a comprehensive picture of knowledge-sharing barriers (Figure 5, Appendix C), our study covers some general software risk items (Boehm, 1991) and classic mistakes in agile practices (McConnell, 2010). For example, barriers such as lack of motivations, unrealistic and estimation and expectations and insufﬁcient planning, are also mentioned as classic mistakes in rapid development (McConnell, 2010). However, our framework is different in a number ways. First, it is distinctly focused on knowledge-sharing barriers, rather than on general performance outcomes. Second, it delves into some unique challenges of agile development that are not mentioned in similar frameworks (McConnell, 2010), e.g., by specifying barriers such as ‘lack of purpose and proper organization in Scrum review meetings’, ‘making decision in development without consulting client (due to tight sprint schedules)’ and ‘lack of communication of agile time requirements with client up front’. Moreover, the framework merges similar items, removes redundant items and has taken steps away from company-speciﬁc language and jargons (e.g., merging ‘omitting necessary tasks from estimates’ and ‘overly optimistic
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams schedules’). Accordingly, the framework in Figure 5 and Appendix C opens for qualitative and quantitative studies of the dynamic interplay between knowledge-sharing barrier constructs, a line of investigation that has not been sufﬁciently addressed in previous research (e.g. (; Joshi et al., 2007; Pee et al., 2010; Ghobadi & D’Ambra, 2013)). Third, we add to the promising literature on CCM (Laukkanen, 1994, Laukkanen & Päivi, 2013). According to Laukkanen and Päivi, methodological discussions of CCM are relatively rare. For example, there are no ﬁrm and standard guidelines on measurement indicators in CCM. Accordingly, we adapted existing guidelines and examined maps at three levels of analysis – map, construct and between constructs. We also went beyond existing guidelines by drawing upon empirical statements to discuss how roles instantiated barriers and how they emphasized each barrier construct. Comparing this to prior studies (Chandra & Loosemore, 2010, Nadkarni & Narayanan, 2005), we suggest our methodological approach as a systematic and innovative approach to CCM that can be used by IS as well as non-IS researchers. Finally, we used polar sampling (Eisenhardt & Graebner, 2007) of high performing and low performing projects to secure variance across selected projects and add insights related to project outcomes. Comparing barriers between the two high performing projects (HA, HB) and the two low performing projects (LA, LB), we observed a total of 8, 15, 30 and 20 knowledgesharing barriers items for projects HA, HB, LA and LB. Hence, the high performance projects experienced fewer knowledge-sharing barriers than the low performing. Recognizing the relationship between knowledge-sharing barriers and performance outcomes (high performance projects experienced fewer knowledge-sharing barriers than the low performing), future research may focus on how high performing and low performing projects differ in the way they address knowledge-sharing barriers and if there is any relationship between patterns of used resolution techniques and performance outcomes.

Managerial implications Personal and environmental demands impose different role perceptions and behaviours (Newman & Robey, 1992; Robey et al., 2001; Barki & Hartwick, 2001). While these differences are natural, being aware of such variations is critical to the success of software projects. Software organizations should consider educating their development teams to have a better understanding of knowledge-sharing barriers and differences in perceptions across key stakeholders (Figures 1–5, Appendix C). To support collective mindfulness (McAvoy et al., 2012), project managers are encouraged to involve team members in the analysis of barriers against the model provided in Figure 5 and the 37 identiﬁed barriers. Such collective efforts may assist team members in sharing mental models to proactively address conﬂicts and cultivate team member collaboration. In addition, managers should understand the different ways barriers may become manifest (Barrier Emphasis across Roles section). For example, supporting the previous literature on software team characteristics (Siau et al., 2007), we found inherent differences in the manifestation of team capabilities barriers across roles. Developers tended to focus on technical aspects of team capabilities, whereas user
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

representatives highlighted the importance of social capabilities. Taking into account such factors, managers may revisit recruiting, training and human resource management for agile teams. To address knowledge-sharing barriers (Appendix C), approaches need to consider context and they change within the same company over time, due to factors such as current characteristics of the development team, client characteristics and project complexity. The agile literature points to a number of approaches for overcoming knowledge-sharing barriers (Vidgen & Wang, 2009; Conboy et al., 2010; Ramesh et al., 2010), e.g., Vidgen and Wang (2009), recognizing practices such as retrospectives and pair programming as well as the enabling inﬂuence of explorations to learn about new areas and share them with the team (Conboy et al., 2010). The knowledge management literature refers to several approaches such as ‘community forums’ and ‘use of space’ to facilitate knowledge sharing (Earl, 2001). Moreover, the software development literature offers suggestions for improving knowledge sharing and overcoming barriers (Bjørnson & Dingsøyr, 2008, Mathiassen & Vogelsang, 2005), e.g., Mathiassen and Vogelsang (2005) discuss network and networking approaches to knowledge sharing – network approaches emphasize the use of technology for sharing knowledge, while networking approaches focus on creating trust and collaboration among those involved in software development. Before any approaches are enacted, managers should be aware of possible inhibiting impacts. Conboy and Morgan (2011) showed, for example, that daily stand-ups can reduce the amount of team members’ time to share and discuss ideas, and a case involving a Jamaican-Indian software team revealed how boundary objects involving deﬁnitional control and the subsequent redistribution of power led to emerging cross-cultural differences and in turn inhibited knowledge sharing (Barrett & Oborn, 2010). With respect to the dynamic views of knowledge (Choi & Lee, 2002, Hansen et al., 1999), managers of knowledge-sharing practices should consider the inherent characteristics of knowledge, e.g., whether knowledge is mainly tacit or explicit (Bohn, 1994; Choi & Lee, 2002). The knowledge management literature also distinguishes between system-oriented strategies focused on creation, storage, sharing and use of knowledge via information technology (mainly involving explicit knowledge), and human-oriented strategies emphasizing dialogue through social and interpersonal networks (involving tacit knowledge).

Limitations and future directions We used a qualitative methodology, CCM, in a little understood domain: perceptual differences to knowledge-sharing behaviours in agile teams. Although CCM enabled us to develop cognitive maps that can serve as guidance for further qualitative or quantitative inquiry, the approach was based on a limited sample size. Moreover, our study was conducted in two medium-size organizations in Australia. We recommend that large-scale empirical studies be undertaken to validate, modify or extend the presented causal maps. In doing so and in particular for larger samples, we encourage using available software for comparative causal mapping such as CMAP3 or Cognizer (Clarkson & Hodgkinson, 2005; Laukkanen & Päivi, 2013). Researchers may investigate approaches and interventions that allow for more fruitful conversations across
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams different roles and possibly map the identiﬁed barriers to process and product-related uncertainties, respectively (Mathiassen & Pedersen, 2008).

AC K N OW L E D G E M E N T S

We would like to thank the editors and reviewers for their constructive feedback and comments.

REFERENCES
Andres, H.P. (2002) A comparison of face-to-face and virtual software development teams. Team Performance Management, 8, 39–48. Armstrong, D.J., Riemenschneider, C.K., Allen, M.W. & Reid, M.F. (2007) Advancement, voluntary turnover and women in IT: a cognitive study of work–family conﬂict. Information and Management, 44, 142–153. Augustine, S., Payne, B., Sencindiver, F. & Woodcock, S. (2005) Agile project management: steering from the edges. Communications of the ACM, 48, 85–89. Barki, H. & Hartwick, J. (2001) Interpersonal conﬂict and its management in information system development. MIS Quarterly, 25, 195–228. Barrett, M. & Oborn, E. (2010) Boundary object use in cross-cultural software development teams. Human Relations, 63, 1199–1221. Biddle, B.J. (1986) Recent development in role theory. Annual Review of Sociology, 12, 67–92. Biddle, B.J. (1979) Role Theory: Expectations, Identities, and Behaviors, Academic Press, New York, USA. Bjørnson, F.O. & Dingsøyr, T. (2008) Knowledge management in software engineering: a systematic review of studied concepts, ﬁndings and research methods used. Information and Software Technology, 50, 1055–1068. Boehm, B. (2002) Get ready for agile methods, with care. Computer, 35, 64–69. Boehm, B.W. (1991) Software risk management: principles and practices. IEEE Software 8, 32–41. Bohn, R.E. (1994) Measuring and managing technological knowledge. Sloan Management Review, 36, 61–61. Budhwar, P.S. & Sparrow, P.R. (2002) Strategic HRM through the cultural looking glass: mapping the cognition of British and Indian managers. Organization Studies, 23, 599–638. Chan, F.K.Y. & Thong, J.Y.L. (2009) Acceptance of agile methodologies: a critical review and conceptual framework. Decision Support Systems, 46, 803–814. Chandra, V. & Loosemore, M. (2010) Mapping stakeholders’ cultural learning in the hospital brieﬁng process. Construction Management and Economics, 28, 761–769. Chau, T. & Maurer, F. (2004) Knowledge sharing in agile software teams. In: Logic Versus Approximation, Wolfgang, L. (ed.), pp. 173–183. Springer, United States. Chau, T., Maurer, F. & Melnik, G. (2003) Knowledge sharing: agile methods vs. tayloristic methods. IEEE International Workshops on Enabling Technologies: Infrastructure for Collaborative Enterprises, Johannes Kepler University of Linz, Austria. Choi, B. & Lee, H. (2002) Knowledge management strategy and its link to knowledge creation process. Expert Systems with Applications, 23, 173–187. Clarkson, G.P. & Hodgkinson, G.P. (2005) Introducing Cognizer™: a comprehensive computer package for the elicitation and analysis of cause maps. Organizational Research Methods, 8, 317–341. Cockburn, A. (2006) Agile Software Development: The Cooperative Game (Agile Software Development Series), Addison-Wesley Professional, Boston, United States. Cockburn, A. & Highsmith, J. (2001) Agile software development: the people factor. Computer, 34, 131–133. Conboy, K., Coyle, S., Wang, X. & Pikkarainen, M. (2010) People over process: key people challenges in agile development. IEEE Software, 99, 47–57. Conboy, K. & Morgan, L. (2011) Beyond the customer: opening the agile systems development process. Information and Software Technology, 53, 535–542. Corvera Charaf, M., Rosenkranz, C. & Holten, R. (2012) The emergence of shared understanding: applying

© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

functional pragmatics to study the requirements development process. Information Systems Journal, 23, 115–135. Curtis, B., Krasner, H. & Iscoe, N. (1988) A ﬁeld study of the software design process for large systems. Communications of the ACM, 31, 1268–1287. Dingsøyr, T. & Hanssen, G. (2003) Extending agile methods: postmortem reviews as extended feedback. Fourth International Workshop on Learning Software Organizations, Chicago, IL, USA. Dingsøyr, T., Nerur, S., Balijepally, V.G. & Moe, N.B. (2012) A decade of agile methodologies: towards explaining agile software development. Journal of Systems and Software, 85, 1213–1221. Dybå, T. & Dingsøyr, T. (2008) Empirical studies of agile software development: a systematic review. Information and Software Technology, 50, 833–859. Earl, M. (2001) Knowledge management strategies: toward a taxonomy. Journal of Management Information Systems, 18, 215–242. Eden, C., Ackermann, F. & Cropper, S. (1992) The analysis of cause maps. Journal of Management Studies, 29, 309–324. Eisenhardt, K.M. & Graebner, M.E. (2007) Theory building from cases: opportunities and challenges. Academy of Management Journal, 50, 25–32. Galletta, D.F. & Heckman Jr, R.L. (1990) A role theory perspective on end-user development. Information Systems Research, 1, 168–187. Ghobadi, S. (2011) Challenges of cross-functional software development teams: a conceptual study. Journal of Information Technology Management, 22, 26–35. Ghobadi, S. & D’Ambra, J. (2013) Modeling high-quality knowledge sharing for cross-functional software development teams. Information Processing and Management, 49, 138–157. Ghobadi, S. & Ghobadi, Z. (2013) How access gaps interact and shape digital divide: a cognitive investigation. Behavior & Information Technology. DOI: 10.1080/ 0144929X.2013.833650 Grifﬁth, C. (2011) Software Boom Ahead for Local Market, in: The Australian, New Corp Australia, New South Wales, Australia. Guba, E.G. & Lincoln, Y.S. (1985) Naturalistic Inquiry, Sage Publications, Incorporated, London, UK. Hansen, B.H. & Kautz, K. (2004) Knowledge Mapping: A Technique for Identifying Knowledge Flows in Software Organisations, Springer, Berlin. Hansen, M., Nohria, N. & Tierney, T. (1999) What’s your strategy for managing knowledge. Harvard Business Review, 2001, 106–116.

Highsmith, J. (2002) Agile Software Development Ecosystems, Addison-Wesley Longman Publishing Co., Inc., Boston, United States. Hodgkinson, G.P. & Clarkson, G.P. (2005) What have we learned from almost 30 years of research on causal mapping. In: Causal Mapping for Research in Information Technology, Narayanan, V.K. & Armstrong, D.J. (eds.), pp. 46–79. Idea Group Publishing, Hershey, PA. Holsti, O.R. (1969) Content Analysis for the Social Sciences and Humanities, Addison-Wesley, Don Mills, ON. Huisman, M. & Iivari, J. (2006) Deployment of systems development methodologies: perceptual congruence between IS managers and systems developers. Information and Management, 43, 29–49. Jenkins, M. & Johnson, G. (1997) Entrepreneurial intentions and outcomes: a comparative causal mapping study. Journal of Management Studies, 34, 895–920. Joshi, K.D., Sarker, S. & Sarker, S. (2007) Knowledge transfer within information systems development teams: examining the role of knowledge source attributes. Decision Support Systems, 43, 322–335. Karlsen, J.T., Hagman, L. & Pedersen, T. (2011) Intra-project transfer of knowledge in information systems development ﬁrms. Journal of Systems and Information Technology, 13, 66–80. Katz, D. & Kahn, R.L. (1978) The Social Psychology of Organizations, Wiley, New York, NY. Kautz, K., Madsen, S. & Nørbjerg, J. (2007) Persistent problems and practices in information systems development. Information Systems Journal, 17, 217–239. Keil, M., Tiwana, A. & Bush, A. (2002) Reconciling user and project manager perceptions of IT project risk: a Delphi study. Information Systems Journal, 12, 103–119. Korkala, M. & Abrahamsson, P. (2007) Communication in distributed agile development: a case study, Software Engineering and Advanced Applications, IEEE, Lübeck, Germany. Kotlarsky, J. & Oshri, I. (2005) Social ties, knowledge sharing and successful collaboration in globally distributed system development projects. European Journal of Information Systems, 14, 37–48. Langﬁeld-Smith, K. & Wirth, A. (1992) Measuring differences between cognitive maps. Journal of the Operational Research Society, 43, 1135–1150. Laukkanen, M. (1994) Comparative cause mapping of organizational cognitions. Organization Science, 5, 322–343. Laukkanen, M. (1998) Conducting causal mapping research: opportunities and challenges. In: Managerial and Organisational Cognition Theory, Method, and

© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams
Research, Eden, C. & Spender, J.C. (eds.), pp. 168–191. Sage Publication, London, UK. Laukkanen, M. & Päivi, E. (2013) New designs and software for cognitive causal mapping. Qualitative Research in Organizations and Management: An International Journal, 8, 122–147. Leavitt, H.J. (1964) Applied organization change in industry: structural, technical and human approaches. In: New Perspectives in Organizational Research, Cooper, W.W., Leavitt, H.J. & Shelly, M.W. (eds.), pp. 55–71. John Wiley and Sons, New York, United States. Lee, A.S. & Baskerville, R.L. (2003) Generalizing generalizability in information systems research. Information Systems Research, 14, 221–243. Levesque, L.L., Wilson, J.M. & Wholey, D.R. (2001) Cognitive divergence and shared mental models in software development project teams. Journal of Organizational Behavior, 22, 135–144. Levina, N. (2005) Collaborating on multiparty information systems development projects: a collective reﬂectionin-action view. Information Systems Research, 16, 109–130. Levy, M. & Hazzan, O. (2009) Knowledge management in practice: the case of agile software development. International Conference on Software Engineering, Vancouver, Canada. Linberg, K.R. (1999) Software developer perceptions about software project failure: a case study. Journal of Systems and Software, 49, 177–192. Lyytinen, K., Mathiassen, L. & Ropponen, J. (1998) Attention shaping and software risk—a categorical analysis of four classical risk management approaches. Information Systems Research, 9, 233–255. Lyytinen, K. & Newman, M. (2008) Explaining information systems change: a punctuated socio-technical change model. European Journal of Information Systems, 17, 589–613. Mähring, M., Keil, M., Mathiassen, L. & Pries-Heje, J. (2008) Making IT project de-escalation happen: an exploration into Key roles. Journal of the Association for Information Systems, 9, 1–19. Mathiassen, L. & Pedersen, K. (2008) Managing uncertainty in organic development projects. Communications of the Association for Information Systems, 23, 483–500. Mathiassen, L. & Vogelsang, L. (2005) Managing knowledge in software method adoption. International Journal of Business Information Systems, 1, 102–117. McAvoy, J., Nagle, T. & Sammon, D. (2012) Using mindfulness to examine ISD agility. Information Systems Journal, 23, 155–172.

McConnell, S. (2010) Rapid Development: Taming Wild Software Schedules, O’Reilly Media, Inc., Redmond, WA. Melnik, G. & Maurer, F. (2004) Direct verbal communication as a catalyst of agile knowledge sharing. Agile Development Conference, Salt Lake City, UT, United States. Nadkarni, S. & Narayanan, V. (2005) Validity of the structural properties of text-based causal maps: an empirical assessment. Organizational Research Methods, 8, 9–40. Nelson, K.M., Nadkarni, S., Narayanan, V. & Ghods, M. (2000) Understanding software operations support expertise: a revealed causal mapping approach. MIS Quarterly, 24, 475–507. Nerur, S., Mahapatra, R.K. & Mangalaraj, G. (2005) Challenges of migrating to agile methodologies. Communications of the ACM, 48, 72–78. Newman, M. & Robey, D. (1992) A social process model of user-analyst relationships. MIS Quarterly, 16, 249–266. Oshri, I., van Fenema, P. & Kotlarsky, J. (2008) Knowledge transfer in globally distributed teams: the role of transactive memory. Information Systems Journal, 18, 593–616. Paetsch, F., Eberlein, A. & Maurer, F. (2003) Requirements engineering and agile software development. IEEE International Workshops on Enabling Technologies: Infrastructure for Collaborative Enterprises Linz, Austria. Pee, L.G., Kankanhalli, A. & Kim, H.W. (2010) Knowledge sharing in information systems development: a social interdependence perspective. Journal of the Association for Information Systems, 11, 550–575. Peppard, J. & Ward, J. (2004) Beyond strategic information systems: towards an IS capability. The Journal of Strategic Information Systems, 13, 167–194. Persson, J.S., Mathiassen, L. & Aaen, I. (2012) Agile distributed software development: enacting control through media and context. Information Systems Journal, 22, 411–433. Persson, J.S., Mathiassen, L., Boeg, J., Madsen, T.S. & Steinson, F. (2009) Managing risks in distributed software projects: an integrative framework. IEEE Transactions on Engineering Management, 56, 508–532. Pikkarainen, M., Haikara, J., Salo, O., Abrahamsson, P. & Still, J. (2008) The impact of agile practices on communication in software development. Empirical Software Engineering, 13, 303–337. Ramesh, B., Cao, L. & Baskerville, R. (2010) Agile requirements engineering practices and challenges: an empirical study. Information Systems Journal, 20, 449–480.

© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen
Williams, C. (2010) Client–vendor knowledge transfer in IS offshore outsourcing: insights from a survey of Indian software engineers. Information Systems Journal, 21, 335–356. Yang, H.L. & Tang, J.H. (2004) Team structure and team performance in IS development: a social network perspective. Information and Management, 41, 335–349. Yin, R.K. (2009) Case Study Research: Design and Methods, Sage publications, INC, London, UK. Zigurs, I. & Kozar, K.A. (1994) An exploratory study of roles in computer-supported groups. MIS Quarterly, 18, 277–297.

Ramesh, B., Cao, L., Mohan, K. & Xu, P. (2006) Can distributed software development be agile? Communications of the ACM, 49, 41–46. Ramesh, B., Mohan, K. & Cao, L. (2012) Ambidexterity in agile distributed development: an empirical investigation. Information Systems Research, 23, 323–339. Reid, M.F., Allen, M.W., Armstrong, D.J. & Riemenschneider, C.K. (2010) Perspectives on challenges facing women in IS: the cognitive gender gap. European Journal of Information Systems, 19, 526–539. Robey, D., Welke, R. & Turk, D. (2001) Traditional, iterative, and component-based development: a social analysis of software development paradigms. Information Technology and Management, 2, 53–70. Sarker, S. & Sarker, S. (2009) Exploring agility in distributed information systems development teams: an interpretive study in an offshoring context. Information Systems Research, 20, 440–461. Sawyer, S., Guinan, P.J. & Cooprider, J. (2008) Social interactions of information systems development teams: a performance perspective. Information Systems Journal, 20, 81–107. Scott, W.A. (1955) Reliability of content analysis: the case of nominal scale coding. Public Opinion Quarterly, 19, 321–325. Siau, K., Tan, X. & Sheng, H. (2007) Important characteristics of software development team members: an empirical investigation using Repertory Grid. Information Systems Journal, 20, 563–580. Sonnentag, S. (1995) Excellent software professionals: experience, work activities, and perception by peers. Behaviour and Information Technology, 14, 289–299. Turk, D., Robert, F. & Rumpe, B. (2005) Assumptions underlying agile software-development processes. Journal of Database Management, 16, 62–87. Tyler, B.B. & Gnyawali, D.R. (2009) Managerial collective cognitions: an examination of similarities and differences of cultural orientations. Journal of Management Studies, 46, 93–126. Vidgen, R. & Wang, X. (2009) Coevolving systems and the organization of agile software development. Information Systems Research, 20, 355–376. Walz, D.B., Elam, J.J. & Curtis, B. (1993) Inside a software design team: knowledge acquisition, sharing, and integration. Communication of ACM, 46, 63–77.

Biographies
Shahla Ghobadi has a BEng degree in Industrial Engineering, an MSc degree in Information Technology Management and a PhD degree in Information Systems at the University of New South Wales, Australia. Her research focuses on knowledge management and collaboration in software teams and on online activism and digital divide. She has published in ranked outlets such as Information Processing & Management, Journal of Systems and Software, Behaviour & Information Technology, Journal of Knowledge Management and Association for Information Systems conferences. Shahla has worked extensively as an IT Consultant in the education sector, automobile and software industries, locally and internationally. She can be reached at s.ghobadi@unsw.edu.au. Lars Mathiassen is a Georgia Research Alliance Eminent Scholar and a Professor at the Computer Information Systems Department, at Georgia State University. His research focuses on the development of software and information services, on IT-enabled innovation of business processes, and on management of organizational change processes. He has published extensively in major information systems and software engineering journals and coauthored several books on the subject including Professional Systems Development, Computers in Context: The Philosophy and Practice of Systems Design, Object Oriented Analysis & Design and Improving Software Organizations: From Principles to Practice. He has served as senior editor for MIS Quarterly and is currently a senior editor for Information & Organization and for the Journal of Information Technology. His website is www.larsmathiassen. org and he can be reached at lmathiassen@ceprin.org.

© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

APPENDIX A: INTERVIEW GUIDE • In this project, how important was ‘effective knowledge sharing’ among team members? • In what ways was knowledge sharing practiced? • During the project, how satisﬁed you were by the knowledge sharing practices among team members? • In what ways did knowledge sharing help the project achieve its goals? • Which problems did you notice in achieving effective knowledge sharing among team members? • What were the key enablers of effective knowledge sharing? • What were the key barriers to effective knowledge sharing? • Now, I have noted a number of barriers to effective knowledge sharing in this project. Can you please have a look and sort them for me based on their level of importance (This question was asked as recommended by cognitive mapping literature to allow us ﬁnd a better sense of the cognitive importance of concepts and constructs (Tyler & Gnyawali, 2009)) • Is there anything else that you would like to mention that we did not cover?

APPENDIX B: BARRIER CONSTRUCTS AND ITEMS
1. Team diversity (six concepts) Different background (e.g., education background, experience and balance of technical knowledge power) Unfamiliarity of team members (not having prior work experience together) (development team) Physical distance between team members Different languages (development team) Different languages (development and client team) Time difference (between development and client company) 3. Team capabilities (10 concepts) Unfamiliarity with the coding technology (development team) Unfamiliarity with the business domain knowledge (development team) Unfamiliarity with the used collaborative technologies (development team) Writing unclear stories (development team) Lacking information knowledge (client representative) Not having sufﬁcient understanding about the technical requirements (development team) Low levels of social skills (development team) Not understanding client business (development team) Lack of experience with software development companies (client representatives) Not enough IT human resources (client company) 2. Team perceptions (eight concepts) Lack of motivation (development team) Not being ﬂexible to innovation (development team) Tendency to work independently (development team) Low levels of trust between team members Low levels of focus on project (development team) Cultural fears regarding estimation (development team) Perceiving the organizational importance of the project to be low (development team) Inappropriate assumptions (made by client representatives)

4. Project communication (11 concepts) Lack of face-to-face communication with client (development team) Client unavailability for communication Slow turn around (client representative) Passive engagement with the client (development team) Not putting the client in the loop of related communications (development team) Not communicating agile time requirements to the client (development team) Not sharing information about client feedback with the development team (project management) Miscommunication within the client company (IT department) Miscommunication about project structure and responsibilities (between development and client company)

(Continues)
© 2015 Blackwell Publishing Ltd, Information Systems Journal

S Ghobadi & L Mathiassen

APPENDIX B. (Continued)
3. Team capabilities (10 concepts) 4. Project communication (11 concepts) Improper check of functionalities with end users (client representative) Sharing complex technical information with the client representative (development team) 6. Project technology (four concepts) Lack of high-quality collaborative technologies Lack of deﬁned templates for collaboration tools Lack of a good prototype for communicating requirements Inappropriate methodology (agile) 7. Project setting (nine concepts) Domain-speciﬁc project Multi-dimensional project (software and infrastructure sides) complex business rules Small budget project Existence of legacy systems Not being able to choose team members for the project (nature of the project) Commercial culture (development company) Agile vs. non-agile cultures (client and development company) Bureaucratic organization (client company)

5. Project organization (12 concepts) Not much planning beforehand (development team) Assigning few testers compared to the number of developers Lack of proper prior documentation Multi-tasking (development team) Lack of continuity (development team) Several IT representative roles (client company) Unrealistic estimations by development team (development team) Making decision without consulting the client (development team) Tight schedule Long split sprints Providing dummy data for test (client company) Scrum review structures (less objective while sharing updates) IT, information techology.

APPENDIX C: FINALIZED BARRIER CONSTRUCTS AND ITEMS
1. Team diversity refers to conceptual, geographical and time differences between team members that may hinder effective knowledge sharing. 1. Different speaking languages among members 2. Different working and disciple-related backgrounds among members 2. Team perceptions refer to attitudes and values of team members that may hinder effective knowledge sharing. 1. Lack of motivation, focus and adaptability in development team 2. Inappropriate assumptions about project scope made by client (due to the development team’s ﬂexible agile-related approach) 3. Fear of self-exposure to technical and agile skills deﬁciencies in development team 4. Performance evaluation based on technical achievements 5. Stakeholder neglect of nonfunctional requirement 4. Project communication refers to communicationrelated issues within the project that may hinder effective knowledge sharing. 1. Inadequate client availability and participation 2. Lack of communication of agile time requirements with client up front 3. Lack of concurrence within client team 4. Product owner lack of sharing client feedback with development team

3. Different time zones and physical distance between members 4. Lack of prior joint working experience in development team 3. Team capabilities refer to knowledge and skill-related issues among team members that may hinder effective knowledge sharing. 1. Insufﬁcient understanding of business domain and context 2. Unfamiliarity with development and collaboration technologies 3. Insufﬁcient and ambiguous requirements 4. Inadequate social skills 5. Lack of familiarity with agile values and principles

6. Lack of IT resources and working experience with software companies in client company

(Continues)
© 2015 Blackwell Publishing Ltd, Information Systems Journal

Knowledge-sharing barriers in agile teams

APPENDIX C. (Continued)
5. Project organization refers to aspects of the organization and conduct of the project that may hinder effective knowledge sharing. 1. Tight sprints schedule with little time for interaction 2. Inadequate planning and organization in agile practices 3. Multi-tasking and lack of continuity in development team 4. Inadequate planning and insufﬁcient documentation 5. Making decisions in development without consulting client (due to tight sprints schedules) 6. Frequent change of IT representatives in client company 7. Centralized decision making 6. Project technology refers to technological issues that may hinder effective knowledge sharing. 1. Lack of using high-quality collaboration technologies and processes in development team 2. Lack of a good prototype to communicate requirements between stakeholders 3. Employing agile methodology without planning up front 4. Prioritization of requirements based on one-dimensional thinking 7. Project setting refers to task and context related issues that may hinder effective knowledge sharing. 1. Complex and domain speciﬁc project 2. Small budge agile project with limited room for interaction 3. Dependence on existing or legacy technology 4. Inability to choose development team members 5. Different approaches to agility between development and client company 6. Proﬁt focused culture in development company 7. Bureaucratic and centralized organizations

Bold items are speciﬁcally agile-related. Italized items were added after incorporating material from the agile development literature. IT, information technology.

© 2015 Blackwell Publishing Ltd, Information Systems Journal

